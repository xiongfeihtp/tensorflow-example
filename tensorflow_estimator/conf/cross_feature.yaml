## Cross Feature Configuration

# Using tf.feature_column.crossed_column API,
# see https://www.tensorflow.org/api_docs/python/tf/feature_column/crossed_column
# Transform: Hash(cartesian product of features) % hash_bucket_size

# Q: How to chose `hash_bucket_size` ?
# A: 1. if we know the total number of distinct value `N` of a cross feature,
#       to avoid collision, set `hash_bucket_size` about 2*N.
#    2. if we do not know,
#       1) for small size category cross features, recommended `hash_bucket_size` to be production of each cross feature distinct value count.
#          For example, cross feature {age, location}, age has n values, gender has m values,
#       then hash_bucket_size can be set about n*m.
#       2) for large size category cross features, consider high sparsity,
#          recommended `hash_bucket_size` to be above rule divide 10~1000.

# Conf Format Example
# features:               # cross feature names, at least 2, separated by `&`
#   hash_bucket_size:     # optional, if set empty, defaults 10(k), (unit is a thousand).
#   is_deep:              # `0` or `1`, set `0` for only wide input, set `1` for embedding the cross feature for deep input
                          # if set empty, defaults to `1`

# Set unused features by using symbol `#` ahead of the lines.
item_id&item_brand_id:
  hash_bucket_size: 100
  is_deep: 1
#user_gender_id&user_occupation_id:
#  hash_bucket_size: 10
#  is_deep: 1


